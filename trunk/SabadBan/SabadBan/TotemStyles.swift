//
//  TotemStyles.swift
//  ProjectName
//
//  Created by AuthorName on 9/27/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TotemStyles : NSObject {

    //// Drawing Methods

    public class func drawVerticalSlider(controlFrame controlFrame: CGRect = CGRectMake(0, 0, 36, 216), knobRect: CGRect = CGRectMake(0, 89, 36, 28)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let onColor = UIColor(red: 0.000, green: 0.493, blue: 1.000, alpha: 1.000)
        var onColorRedComponent: CGFloat = 1,
            onColorGreenComponent: CGFloat = 1,
            onColorBlueComponent: CGFloat = 1
        onColor.getRed(&onColorRedComponent, green: &onColorGreenComponent, blue: &onColorBlueComponent, alpha: nil)

        let color = UIColor(red: (onColorRedComponent * 0), green: (onColorGreenComponent * 0), blue: (onColorBlueComponent * 0), alpha: (CGColorGetAlpha(onColor.CGColor) * 0 + 1))
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let offColor = UIColor(hue: colorHueComponent, saturation: colorSaturationComponent, brightness: 0.8, alpha: CGColorGetAlpha(color.CGColor))
        let handleColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var handleColorRedComponent: CGFloat = 1,
            handleColorGreenComponent: CGFloat = 1,
            handleColorBlueComponent: CGFloat = 1
        handleColor.getRed(&handleColorRedComponent, green: &handleColorGreenComponent, blue: &handleColorBlueComponent, alpha: nil)

        let color2 = UIColor(red: (handleColorRedComponent * 0.5), green: (handleColorGreenComponent * 0.5), blue: (handleColorBlueComponent * 0.5), alpha: (CGColorGetAlpha(handleColor.CGColor) * 0.5 + 0.5))

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSizeMake(0.1, 3.1)
        shadow.shadowBlurRadius = 5

        //// Frames
        let knobFrame = CGRectMake(knobRect.origin.x, knobRect.origin.y, knobRect.size.width, knobRect.size.height)


        //// Bar Off Drawing
        let barOffPath = UIBezierPath()
        barOffPath.moveToPoint(CGPointMake(controlFrame.minX + 19, controlFrame.minY + 15))
        barOffPath.addLineToPoint(CGPointMake(controlFrame.minX + 18.5, controlFrame.maxY - 16))
        barOffPath.lineCapStyle = .Round;

        offColor.setStroke()
        barOffPath.lineWidth = 6
        barOffPath.stroke()


        //// Bar On Drawing
        let barOnPath = UIBezierPath()
        barOnPath.moveToPoint(CGPointMake(knobFrame.minX + 0.51389 * knobFrame.width, knobFrame.minY + 13.5))
        barOnPath.addLineToPoint(CGPointMake(controlFrame.minX + 18.5, controlFrame.maxY - 16))
        barOnPath.lineCapStyle = .Round;

        onColor.setStroke()
        barOnPath.lineWidth = 6
        barOnPath.stroke()


        //// Knob Oval Drawing
        let knobOvalPath = UIBezierPath(ovalInRect: CGRectMake(knobFrame.minX + floor((knobFrame.width - 25) * 0.54545 + 0.5), knobFrame.minY + floor((knobFrame.height - 25) * 0.33333 + 0.5), 25, 25))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        handleColor.setFill()
        knobOvalPath.fill()
        CGContextRestoreGState(context)

        color2.setStroke()
        knobOvalPath.lineWidth = 2
        knobOvalPath.stroke()
    }

}
